#+TITLE: Metody przeszukiwania bezpośredniego dla funkcji jednowymiarowych
#+SUBTITLE: Optymalizacja nieliniowa - projekt 1
#+AUTHOR: Patryk Gronkiewicz 164157
#+LANGUAGE: pl
#+OPTIONS: toc:nil H:2 num:t
#+PROPERTY: header-args:R  :session *R*
#+BEAMER_THEME: Hannover
#+BEAMER_COLOR_THEME: orchid
#+BEAMER_FONT_THEME: professionalfonts
#+STARTUP: beamer

* Zadanie
** Treść
W zakładach firmy ACME Inc. produkowane są kolumny głośnikowe. Inżynierowie zatrudnieni w tej firmie starają się stworzyć jak najlepszy głośnik o jak najmniejszych wymiarach. Podczas budowania głośników panuje kilka zasad. Na nasze potrzeby zakładamy, że głośnik taki musi mieć zamkniętą budowę.
** Założenia
1. Im większa membrana głośnika, tym ,,więcej'' basu jest w stanie wydać z siebie. Zysk uznajemy za taki, który zachowuje się jak $f(d)=\frac1d$.
2. Im większa objętość obudowy, tym szybciej może reagować membrana (jest bardziej dynamiczna). Zysk jakości uznajemy za zachowujący się jak $f(V)=\frac1{1.4^{V}}$.
3. Dla łatwości obliczeń przyjmujemy, że membrana jest o $10$ jednostek[fn:jednostka] mniejsza od /kwadratowego/ przedniego panelu obudowy (tj. $5\mathrm{cm}$ ,,zapasu''). Na dodatek grubość obudowy jest 2.4-krotnie większa od wymiaru przedniego panelu.
4. Niechęć do większej obudowy rośnie jak $f(x)=2.6^{x}$, gdzie $x$ to wymiar frontu obudowy.
[fn:jednostka] jedna jednostka to $\frac13 \mathrm{cm}$
** Optymalizowana funkcja
Dla centymetrów zadanie jest zdefiniowane jak na \ref{eq:1} względem wielkości panelu
\begin{equation}
\label{eq:1}
f(x)=\frac{1,4^{\left(\frac x3\right)^{3}\cdot2,4}\cdot \frac {x-10}3}{2,6^{\left(\frac x3\right)}}
\end{equation}
** Funkcja zdefiniowana w R
Naszą funkcję zapiszemy najpierw jako wyrażenie, aby później operacje w metodzie Newtona były prostsze.
#+NAME: defined_function
#+begin_src R :results silent
f_exp <- expression(
    (1.4^((x/3)^3)*2.4*(x-10)/3)/2.6^(x/3)
)
f <- function(x) eval(f_exp)
#+end_src
* Metoda Fibonacciego
** Zasada działania
Podobnie do pozostałych bezgradientowych metod przeszukiwania bezpośredniego polega ona na zawężaniu przedziału. W naszym wypadku te zawężenia stają się coraz większe razem z numerem iteracji.

Każdy kolejny ,,poziom'' zawężenia definiuje się jak na równaniu \ref{eq:2}.
\begin{equation}
\label{eq:2}
\delta = \frac{\varphi_{i-1}}{\varphi_{i}}
\end{equation}

Jest to dużo lepsza sytuacja od metody złotego podziału, ponieważ zaczynamy ze zbliżonego poziomu zawężania, a z czasem jest coraz większy.
** Obliczanie kolejnych elementów ciągu Fibonacciego
#+NAME: phi_calculation
#+begin_src R :results silent
phi_values <- c(1, 1)

phi <- function(n) {
  if (length(phi_values) >= n) {
    return(phi_values[n])
  } else {
    for (i in seq(length(phi_values), n + 1)) {
      phi_values <<- c(phi_values,
                       phi_values[i - 2]
                       + phi_values[i - 1])
    }
    return(phi_values[n])
  }
}
#+end_src

** Implementacja
Nie różni się znacząco od tej przedstawionej na zajęciach. Dodano natomiast kilka funkcjonalności, a mianowicie:
+ opcję, która pozwala szukać wartości maksymalnej (=max=)
+ Wypisywanie kolejnych iteracji po podaniu argumentu (=logging=)
+ Tworzenie wykresów (=plotting=) oraz ograniczanie ich (=ylim= - domyślnie 5% szerszy od przedziału poszukiwań)
** Obliczanie liczby iteracji
#+NAME: k_calculation
#+begin_src R :results silent
fib_k <- function(lower, upper, tol) {
  i <- 2
  threshold <- (upper - lower)/tol
  while (phi(i) < threshold) {
    i <- i + 1
  }
  return(i + 1)
}
#+end_src
** Funkcja optymalizująca
\fontsize{6pt}{6.7}\selectfont
#+NAME: fib_optimizer
#+begin_src R :results silent
fibonacci <- function(f, lower, upper, tol,
                      max = FALSE, logging = FALSE, plotting = FALSE,
                      ylim = c(-10, 10), it_lim = -1) {
  if (max) f <- function(x) -f(x)
  k <- fib_k(lower, upper, tol)
  range_len <- abs(upper - lower)
  plot_bot <- lower - 0.05 * range_len
  plot_top <- upper + 0.05 * range_len
  c <- upper - phi(k - 1) / phi(k) * (upper - lower)
  d <- lower + upper - c
  for (i in seq(0, k - 4)) {
    if (f(c) < f(d)) {
      upper <- d
      i <- i + 1
    } else {
      lower <- c
      i <- i + 1
    }
    c <- upper - phi(k - 1) / phi(k) * (upper - lower)
    d <- lower + upper - c
    if (logging) cat("[", i, "] c=", c, ";\td=", d, "\n", sep = "")
    if (plotting) {
      plot(f, plot_bot, plot_top, ylim = ylim, col = "red")
      points(c, f(c), col = "green")
      points(d, f(d), col = "blue")
    }
    if (it_lim > 0 && i > it_lim) return(c(plot_bot, plot_top, lower, c, d, upper))}
  return((lower + upper) / 2)
}
#+end_src
** Wyniki
Po wywołaniu funkcji używającej metody Fibonacciego otrzymujemy wynik podany poniżej.
#+NAME: fib_opt
#+begin_src R :exports both
fibonacci(f, 2, 10, 1e-10)
#+end_src

#+RESULTS: fib_opt
: 9.68645230555025

** Wykresy - iteracja 1
#+NAME: plotting_fib
#+begin_src R :exports none :results silent iterations=0
pdf(paste("plot_fib", iterations, ".pdf", sep = ""))
data <- fibonacci(f, 2, 21, 1e-10, it_lim = iterations)
plot(f, data[[1]], data[[2]], ylim=c(-1000,-10))
points(c(data[[3]],data[[4]],data[[5]],data[[6]]), c(f(data[[3]]),f(data[[4]]),f(data[[5]]),f(data[[6]])))
a <- dev.off()
#+end_src

#+CALL: plotting_fib[:exports none :results silent](iterations=1)
[[./plot_fib1.pdf]]

** Wykresy - iteracja 2
#+CALL: plotting_fib[:exports none :results silent](iterations=2)

[[./plot_fib2.pdf]]
    
** Wykresy - iteracja 3
#+CALL: plotting_fib[:exports none :results silent](iterations=3)

[[./plot_fib3.pdf]]
** Wykresy - iteracja 4
#+CALL: plotting_fib[:exports none :results silent](iterations=4)

[[./plot_fib4.pdf]]

** Wykresy - iteracja 5
#+CALL: plotting_fib[:exports none :results silent](iterations=5)

[[./plot_fib5.pdf]]
** Wykresy - iteracja 6
#+CALL: plotting_fib[:exports none :results silent](iterations=6)

[[./plot_fib6.pdf]]
** Wykresy - iteracja 7
#+CALL: plotting_fib[:exports none :results silent](iterations=7)

[[./plot_fib7.pdf]]
** Wykresy - iteracja 8
#+CALL: plotting_fib[:exports none :results silent](iterations=8)

[[./plot_fib8.pdf]]
** Wykresy - iteracja 9
#+CALL: plotting_fib[:exports none :results silent](iterations=9)

[[./plot_fib9.pdf]]
** Wykresy - iteracja 10
#+CALL: plotting_fib[:exports none :results silent](iterations=10)
[[./plot_fib10.pdf]]
** Wnioski
Metoda złotego podziału jest bardzo efektywną metodą bezgradientową - pozwala na stosunkowo szybkie zawężenie przedziału poszukiwań. Jest znacznie szybsza od metody przeszukiwania potrójnego, a więc najprostszej (implementacyjnie) metody, a także od metody złotego podziału, która jest ,,średnia'' w kwestii szybkości działania.
** Tangling :noexport:
#+begin_src R :tangle fibonacci.R :noweb yes
<<defined_function>>
<<phi_calculation>>
<<k_calculation>>
<<fib_optimizer>>
<<fib_opt>>
#+end_src
* Metoda Newtona
** Założenia
Metoda Newtona wymaga, aby dostarczyć jej zarówno pierwszej, jak i drugiej pochodnej. W związku z tym przyjmiemy, że nasza funkcja jako argumenty dostaje:
1. *Wyrażenie* definiujące funkcję zdefiniowaną na podstawie $x$
2. Punkt startowy
3. Tolerancję

Dodatkowo zostały zdefiniowane argumenty takie jak:
1. Informacje nt. aktualnej iteracji (=logging=)
2. Tworzenie wykresów do iteracji (=plotting=)
   1. ograniczenie $x$ na wykresie (=xlim=)
   2. ograniczenie $y$ na wykresie (=ylim=)
3. Ograniczenie liczby iteracji na potrzeby wykresów ,,pokazowych'' (=it_lim=)
** Zasada działania
Każde kolejne przybliżenie funkcji jest definiowane jako przejście w stronę malejącego gradientu z pomocą pierwszej i drugiej pochodnej. Polega to na zdefiniowaniu kroku $h$ ja we wzorze \ref{eq:3}, natomiast nowy $x^{{(i)}}$ jako poprzedni po przesunięciu o $h$ (równanie \ref{eq:4}).
\begin{equation}
\label{eq:3}
h=-\frac{f'(x)}{f''(x)}
\end{equation}
\begin{equation}
\label{eq:4}
x^{{(i)}}=x^{{(i-1)}}+h
\end{equation}
Wynika to z możliwości aproksymacji funkcji za pomocą wielomianu Taylora stopnia 2 w taki sposób jak w równaniu \ref{eq:5}.
\begin{equation}
\label{eq:5}
f\left(x^{\left(i\right)}+h\right)\approx f\left(x^{\left(i\right)}\right)+f'\left(x^{\left(i\right)}\right)h+\frac12f''\left(x^{\left(i\right)}\right)h^{2}
\end{equation}
** Implementacja
\fontsize{7pt}{6.7}\selectfont
   #+NAME: newton_optimizer
   #+begin_src R :results silent
newton <- function(f_expr, x, tol, logging = FALSE, plotting = FALSE,
                   xlim = c(0, 10), ylim = c(-10, 10), it_lim = -1) {
  f <- function(x) eval(f_expr)
  df <- function(x) eval(D(f_expr, 'x'))
  d2f <- function(x) eval(D(D(f_expr, 'x'), 'x'))
  i <- 1
  repeat {
    h <- function(x) -df(x)/d2f(x)
    new.x <- x + h(x)
    if (logging) cat("[", i, "] x=", x, "\n", sep = "")
    if (plotting) {
      plot(f, xlim[[1]], xlim[[2]], ylim = ylim, col = "red")
      plot(parabole, xlim[[1]], xlim[[2]], ylim = ylim, col = "blue", add = TRUE)
    }
    i <- i + 1
    if (it_lim > 0 && i > it_lim)
      return(function(xh) f(x)+df(x)*(xh-x)+0.5*d2f(x)*(xh-x)^2)
    if (abs(new.x - x) < tol) return(new.x)
    x <- new.x
  }
}
   #+end_src
** Wyniki
Po wywołaniu funkcji używającej metody Newtona otrzymujemy wynik podany poniżej.
#+NAME: newton_opt
#+begin_src R :exports both
newton(f_exp, 10, 1e-10)
#+end_src

#+RESULTS: newton_opt
: 9.68645230138073

** Wykresy - wstępna informacja
#+NAME: plotting_newton
#+begin_src R :exports none :results silent iterations=0
pdf(paste("plot_newton", iterations, ".pdf", sep = ""))
parabole <- newton(f_exp, 10, 1e-10, it_lim = iterations)
plot(f, 2, 10, ylim=c(-1000,-10))
plot(parabole, 2, 10, add = TRUE, col="red")
a <- dev.off()
#+end_src

Parabole prezentowane na wykresach są generowane na podstawie wzoru \ref{eq:5} po uwzględnieniu faktu, że naszym argumentem jest $x+h$, a więc ,,podwójna'' zmienna (finalny wzór jest prezentowany we wzorze \ref{eq:6}), gdzie $xh$ jest naszym argumentem $x+h$.
\begin{equation}
\label{eq:6}
p(xh)=f(x)+f'(x)(xh-x)+0.5f''(x)(xh-x)^2
\end{equation}
** Wykresy - iteracja 1

#+CALL: plotting_newton[:exports none :results silent](iterations=1)

[[./plot_newton1.pdf]]
** Wykresy - iteracja 2
#+CALL: plotting_newton[:exports none :results silent](iterations=2)

[[./plot_newton2.pdf]]

** Wykresy - iteracja 3
#+CALL: plotting_newton[:exports none :results silent](iterations=3)

[[./plot_newton3.pdf]]
